




function NN = createNN(type, RawIn, hidden, nStateVecs, RawOut)
     NN = NeuralNetwork([],[],"");
     if strcmp (type, NN.TEMPORAL)
         %TODO Convert Raw Data to Training Input Data
         %TODO Convert Raw Output to Training Output Data
         TData = RawIn;
         Output = RawOut;
         NN = createTNN(TData, hidden, nStateVecs, Output); 
     end
end




% TData: m by n matrix.
% hidden: shape of hidden layer. (Without bias)
% nStateVecs: Number of state vectors.
% Output: Corresponding converted output to learn. (Not Raw Output)
function NN = createTNN(TData, hidden, nStateVecs, Output)
    
    %Input shape is the number of features from Training Data
    %ie. ins are the input units or plan units.
    ins = size(TData,2);
    
    %Weight Matracies include bias weights.
    %Add a Bias (+1)
    hidden = hidden + 1;
     
    %TNN State vectors have the same number of units and
    %are equal to the Number of input units.
    state = ones(1,nStateVecs).*ins;
    
    %Outputs neurons of output features, include bias weights.
    outs = size(Output,2);
    
    %Total Input is the input units + the state units. (For Vectorisation purposes).
    inputs = ins + sum(state);
     
    %TNN shape consists of the shape of the 
    shape = [inputs, hidden, outs]
    NN = NeuralNetwork(shape, state, "tem");
    
end
